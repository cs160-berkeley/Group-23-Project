/* *     Copyright (C) 2010-2016 Marvell International Ltd. *     Copyright (C) 2002-2010 Kinoma, Inc. * *     Licensed under the Apache License, Version 2.0 (the "License"); *     you may not use this file except in compliance with the License. *     You may obtain a copy of the License at * *      http://www.apache.org/licenses/LICENSE-2.0 * *     Unless required by applicable law or agreed to in writing, software *     distributed under the License is distributed on an "AS IS" BASIS, *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *     See the License for the specific language governing permissions and *     limitations under the License. */
let Pins = require("pins");let remotePins = require("pins");let PLOTTER = require("plotter");

let blueSkin = new Skin ({fill: 'blue'});let whiteSkin = new Skin ({fill: 'white'});let graySkin = new Skin ({fill: 'gray'});let blackSkin = new Skin ({fill: 'black'});let whiteHeaderStyle = new Style({ font: "30px", color: "white" });let whiteMedStyle = new Style({ font: "20px", color: "white" });let whiteSmallStyle = new Style({ font: "10px", color: "white" });let labelStyle = new Style({ color: '#47476B', font: '30px Helvetica bold' });let GraphContainer = Container.template($ => ({   left: 0, right: 0, top: 0, bottom: 0, }));let GraphLabel1 = Line.template($ => ({   left: 10, bottom: 5,   skin: new Skin({ fill: '#B3FFFFFF',}),   contents: [    Label($, { style: labelStyle, string: 'Pet Temperature: ' }),    Label($, {       style: labelStyle, string: '--',       behavior: Behavior({        onCreate: function(content, data) {          this.name = data.name;        },        onReceiveReading: function(content, reading, name) {          //update the value string          trace(name);          if (this.name == name ) {                content.string = reading.toFixed(2);          }        },      })    }),  ]}));let GraphCanvas1 = PLOTTER.Plotter.template($ => ({   left: 5, right: 5, top: 5, bottom: 5,   behavior: PLOTTER.PlotterBehavior({    onTimeChanged: function(content) {      remotePins.invoke("/temp/read", data => {        application.distribute("gotReading", data);      });    },  })}));let GraphLabel2 = Line.template($ => ({   left: 10, bottom: 5,   skin: new Skin({ fill: '#B3FFFFFF',}),   contents: [    Label($, { style: labelStyle, string: 'Weight of Pet: ' }),    Label($, {       style: labelStyle, string: '--',       behavior: Behavior({        onCreate: function(content, data) {          this.name = data.name;        },        onReceiveReading: function(content, reading, name) {          //update the value string          if (this.name == name ) {                content.string = reading.toFixed(2);          }        },      })    }),  ]}));let GraphCanvas2 = PLOTTER.Plotter.template($ => ({   left: 5, right: 5, top: 5, bottom: 5,   behavior: PLOTTER.PlotterBehavior({    onTimeChanged: function(content) {      remotePins.invoke("/weight/read", data => {        application.distribute("gotReading", data);      });    },  })}));let centerdots = new Texture("images/dot-menu-icon.png");let centermenuDots = new Skin({      width: 150, height: 50,      texture: centerdots,      fill: "white",      aspect: "fit"});var THR = 85;let targetHR = new Label({left: 0, right: 5, top: 0,          		style: whiteHeaderStyle, string: THR});let set = new Texture("images/settings-cogwheel-button copy.png");let settingsIm = new Skin({      width: 50, height: 50,      texture: set,      fill: "white",      aspect: "fit"});let rewind = new Texture("images/rewind-button copy.png");let rewindIm = new Skin({      width: 50, height: 50,      texture: rewind,      fill: "white",      aspect: "fit"});let fforward = new Texture("images/fast-forward-button copy.png");let fforwardIm = new Skin({      width: 50, height: 50,      texture: fforward,      fill: "white",      aspect: "fit"});let next = new Texture("images/play-next-button copy.png");let nextIm = new Skin({      width: 500, height: 500,      texture: next,      fill: "white",      aspect: "fit"});let prev = new Texture("images/previous-track copy.png");let prevIm = new Skin({      width: 500, height: 500,      texture: prev,      fill: "white",      aspect: "fit"});let play = new Texture("images/play-arrow copy.png");let playIm = new Skin({      width: 500, height: 500,      texture: play,      fill: "white",      aspect: "fit"});let heart = new Texture("images/favorite-heart-button copy.png");let heartIm = new Skin({      width: 550, height: 550,      texture: heart,      fill: "white",      aspect: "fit"});let add = new Texture("images/round-add-button copy.png");let addIm = new Skin({      width: 550, height: 550,      texture: add,      fill: "white",      aspect: "fit"});let sub = new Texture("images/round-remove-button copy.png");let subIm = new Skin({      width: 550, height: 550,      texture: sub,      fill: "white",      aspect: "fit"});let heartButton = Column.template($ => ({   left: 10, width: 87, height: 87, skin: heartIm, active: true,   contents: [   		new Label({left: 10, right: 10, top: 10,          		style: whiteMedStyle, string: "Target"}),   		targetHR,   ],   //behavior: Behavior({     // onTouchEnded: function(container) {       // application.remove(currentScreen);		//currentScreen = new playScreen();	//	application.add(currentScreen);      //}   //})}));let addButton = Container.template($ => ({   left: 10, width: 50, height: 50, skin: addIm, active: true,   contents: [   ],   behavior: Behavior({      onTouchEnded: function(container) {      	THR = THR + 1;      	targetHR.string = THR;      }   })}));let subButton = Container.template($ => ({   left: 10, width: 50, height: 50, skin: subIm, active: true,   contents: [   ],   behavior: Behavior({      onTouchEnded: function(container) {      	THR = THR - 1;      	targetHR.string = THR;      }   })}));let playButton = Container.template($ => ({   left: 0, right: 0, width: 30, height: 30, skin: playIm, active: true,   contents: [   ],   //behavior: Behavior({     // onTouchEnded: function(container) {       // application.remove(currentScreen);		//currentScreen = new playScreen();	//	application.add(currentScreen);      //}   //})}));let prevButton = Container.template($ => ({   left: 50, width: 20, height: 20, skin: prevIm, active: true,   contents: [   ],   //behavior: Behavior({     // onTouchEnded: function(container) {       // application.remove(currentScreen);		//currentScreen = new playScreen();	//	application.add(currentScreen);      //}   //})}));let nextButton = Container.template($ => ({   right: 50, width: 20, height: 20, skin: nextIm, active: true,   contents: [   ],   //behavior: Behavior({     // onTouchEnded: function(container) {       // application.remove(currentScreen);		//currentScreen = new playScreen();	//	application.add(currentScreen);      //}   //})}));/* Play screen layout */let playScreen = Column.template($ => ({    left: 0, right: 0, top: 0, bottom: 0, skin: whiteSkin,    contents: [      new Line({          left: 0, right: 0, height: 30, skin: graySkin,          contents: [          	new Label({left: 10, right: 10, top: 5,          		style: whiteMedStyle, string: "Now Playing"}),          ]      }),      new Line({          left: 45, right: 45, top: 10, height: 90, skin: whiteSkin,          contents: [          		new subButton(),          		new heartButton(),          		new addButton(),      	 ]      }),      new Column({      		left: 10, right: 10, height: 380, top: 5, skin: blackSkin,      		contents: [      			 new Line({      				top: 5, left: 5, right: 5, height: 320, skin: graySkin,      				contents: [      					new Line({      						top: 10, left: 30, width: 230, height: 230, skin: whiteSkin,      						contents: [      						]     			 		}),     			 		//having trouble making these labels appear     			 		new Label({left: 10, right: 10, top: 0,          					style: whiteSmallStyle, string: "Song Title"}),          				new Label({left: 10, right: 10, top: 0,          					style: whiteSmallStyle, string: "Song Artist"}),      				]     			 }),     			 new Line({      				top: 5, left: 5, right: 5, height: 45, skin: graySkin,      				contents: [      					new prevButton(),      					new playButton(),      					new nextButton(),      				]     			 }),      		]      }),      new Line ({      		left: 0, right: 0, height: 20, top: 10, skin: centermenuDots,      }),    ]}));// let currentScreen;// currentScreen = new playScreen();// application.add(currentScreen);application.behavior = Behavior({  onLaunch: function(content) {        // let discoveryInstance = Pins.discover(        //     connectionDesc => {        //         if (connectionDesc.name == "/sensor") {        //             trace("Connecting to remote pins\n");        //             remotePins = Pins.connect(connectionDesc);        //         }        //     },         //     connectionDesc => {        //        if (connectionDesc.name == "/sensor") {        //             trace("Disconnected from remote pins\n");        //             remotePins = undefined;        //        }        //     }        // );    /*    Initializes a GraphContainer, which includes the GraphCanvas,    upon which values are drawn, and the GraphLabel, which displays    the value as text.     */    var graph = new GraphContainer();    var graph2 = new GraphContainer();          /**    Parameters for the plotter      name: unique identifier      interval: ms between updates      buckets: number of values displayed on the screen at once      background: background color      strokeStyle: color of the line      lineWidth: width of the line      complement: if true, graph ( 1 - value ) rather than the value     */        var plotterParams = {          name: "sensor1",            interval: 10,      buckets:200,          background: "white",          strokeStyle: "red",      lineWidth: 4,      complement: true    };    var plotterParams2 = {          name: "sensor2",            interval: 10,      buckets:200,          background: "white",          strokeStyle: "red",      lineWidth: 4,      complement: true    };          graph.add( new GraphCanvas1( plotterParams ) );    graph.add( new GraphLabel1( plotterParams) );    graph2.add( new GraphCanvas2( plotterParams2 ) );    graph2.add( new GraphLabel2( plotterParams2) );    let whiteSkin = new Skin({ fill: 'white' });    /* Main screen layout */    let MainContainer = Column.template($ => ({        left: 0, right: 0, top: 0, bottom: 0, skin: whiteSkin,        contents: [        graph,        graph2,        // new backButton()      ]    }));    application.add(new MainContainer());  }})